package com.wordtrellis.projecteuler

/**
  * Problem 26
  * A unit fraction contains 1 in the numerator. The decimal representation of
  * the unit fractions with denominators 2 to 10 are given:
  *
  *     ^(1)/_(2)	= 	0.5
  *     ^(1)/_(3)	= 	0.(3)
  *     ^(1)/_(4)	= 	0.25
  *     ^(1)/_(5)	= 	0.2
  *     ^(1)/_(6)	= 	0.1(6)
  *     ^(1)/_(7)	= 	0.(142857)
  *     ^(1)/_(8)	= 	0.125"
  *     ^(1)/_(9)	= 	0.(1)
  *     ^(1)/_(10)	= 	0.1
  *
  * Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can
  * be seen that ^(1)/_(7) has a 6-digit recurring cycle.
  *
  * Find the value of d < 1000 for which ^(1)/_(d) contains the longest
  * recurring cycle in its decimal fraction part.
  *
  * @author : Todd Cook
  *
  */
import scala.collection.mutable.ListBuffer

object problem_26 {
  // adjust this upwards to get longer nonrepeating decimal sequences
  val MAX_SAMPLE_LENGTH = 2000

  def main(args: Array[String]): Unit = {
    answer()
  }

  def answer(): Unit = {
    val candidates = new ListBuffer[(Int, String)]()
    for (x <- (1 to 1000).reverse) {
      candidates append ((x, new UnitFraction(x, MAX_SAMPLE_LENGTH).toString()))
    }
    val candidatePatterns = new ListBuffer[(Int, String, Int)]()
    candidates.foreach(x =>
      candidatePatterns.append(findLongestUniqueRecurringPattern(x, MAX_SAMPLE_LENGTH)))
    val finalCandidates = candidatePatterns.toList.sortWith(_._3 > _._3)
    for (ii <- 0 to 10) {
      println(
        "Unit Fraction denominator: " + finalCandidates(ii)._1 +
          " repeating decimal length: " + finalCandidates(ii)._3 +
          " repeating decimal as string: " + finalCandidates(ii)._2)
    }
    // finalCandidates  // if you really want all the data, it's right here
  }

  /**
    * seed, UnitFraction as String, largest recurring pattern, length of recurring pattern,
    * number of recurrences
    */
  def findLongestUniqueRecurringPattern(pair: (Int, String),
                                        MAX_SAMPLE_LENTH: Int): (Int, String, Int) = {
    val (seed, digitsAsString) = pair
    val candidatePatternLength = 6
    val maxOccurences          = 0
    var maxLength              = 0
    var maxPattern             = ""
    val processing             = true
    // 6 is the minimum number of repeating digits; since the problem statement
    // gave 1/7 as the initial paragon, e.g. ^(1)/_(7) =  0.(142857)
    if (digitsAsString.length < candidatePatternLength || digitsAsString.length < 7) {
      return (seed, maxPattern, maxLength)
    }
    val digitChunks = splitStringIntoGroups(digitsAsString, 6)
    // Short circuit if too small
    if (digitChunks.distinct.size < candidatePatternLength) {
      return (seed, maxPattern, maxLength)
    }
    val start           = findFirstNonZeroDigit(digitsAsString)
    val startSequence   = digitsAsString.substring(start, start + candidatePatternLength)
    val nextMatch       = digitsAsString.indexOf(startSequence, start + 1)
    val distanceBetween = nextMatch - start
    if (nextMatch == -1) {
      return (seed, maxPattern, maxLength)
    }
    if (digitsAsString.substring(start, distanceBetween + 1) ==
          digitsAsString.substring(nextMatch, nextMatch + distanceBetween - start + 1)) {
      maxPattern = digitsAsString.substring(start, distanceBetween + 1)
      maxLength = maxPattern.length
    }
    // determine how many zeroes match and append them to the beginning
    var numberOfZeroes = 0
    var reverseCounter = -1
    while ((reverseCounter + start) != 0) {
      if (digitsAsString.charAt(start + reverseCounter) ==
            digitsAsString.charAt(nextMatch + reverseCounter)) {
        numberOfZeroes += 1
      }
      reverseCounter -= 1
    }
    val totalPattern = (("0" * numberOfZeroes) + maxPattern)
    (seed, totalPattern, totalPattern.length)
  }

  def splitStringIntoGroups(str: String, groupSize: Int): List[String] = {
    require(str.length > groupSize)
    val strings = new ListBuffer[String]()
    var ii      = 0
    while (ii < str.length - groupSize) {
      val tmp = new StringBuilder()
      (0 to groupSize - 1).foreach(a => tmp.append(str(ii + a)))
      strings.append(tmp.toString)
      ii += groupSize
    }
    strings.append(str.substring(ii))
    strings.toList
  }

  /**
    * find the first digit in a string that is 1-9, return the position
    */
  def findFirstNonZeroDigit(num: String): Int = {
    var ii = 0
    while (ii < num.length) {

      if (Integer.valueOf(num(ii) .toString).asInstanceOf[Int] > 0) {
        return ii
      } else {
        ii += 1
      }
    }
    0
  }
}

/**
  *
  * Solution:
  *
  * Results:
  *
  * Unit Fraction denominator: 983 repeating decimal length: 982 repeating decimal as string: 0010172939979654120040691759918616480162767039674465920651068158697863682604272634791454730417090539165818921668362156663275686673448626653102746693794506612410986775178026449643947100712105798575788402848423194303153611393692777212614445574771108850457782299084435401831129196337741607324516785350966429298067141403865717192268565615462868769074262461851475076297049847405900305188199389623601220752797558494404883011190233977619532044760935910478128179043743641912512716174974567650050864699898270600203458799593082400813835198372329603255340793489318413021363173957273652085452695829094608341810783316378433367243133265513733468972533062054933875890132248219735503560528992878942014242115971515768056968463886063072227873855544252288911495422177009155645981688708036622583926754832146490335707019328585961342828077314343845371312309257375381485249237029501525940996948118006103763987792472024415055951169888097660223804679552390640895218718209562563580874872838250254323499491353
  * Unit Fraction denominator: 977 repeating decimal length: 976 repeating decimal as string: 0010235414534288638689866939611054247697031729785056294779938587512794268167860798362333674513817809621289662231320368474923234390992835209825997952917093142272262026612077789150460593654042988741044012282497441146366427840327533265097236438075742067553735926305015353121801432958034800409416581371545547594677584442169907881269191402251791197543500511770726714431934493346980552712384851586489252814738996929375639713408393039918116683725690890481064483111566018423746161719549641760491299897645854657113613101330603889457523029682702149437052200614124872057318321392016376663254861821903787103377686796315250767656090071647901740020470829068577277379733879222108495394063459570112589559877175025588536335721596724667349027635619242579324462640736949846468781985670419651995905834186284544524053224155578300921187308085977482088024564994882292732855680655066530194472876151484135107471852610030706243602865916069600818833162743091095189355168884339815762538382804503582395087
  * Unit Fraction denominator: 971 repeating decimal length: 970 repeating decimal as string: 0010298661174047373841400617919670442842430484037075180226570545829042224510813594232749742533470648815653964984552008238928939237899073120494335736354273944387229660144181256436663233779608650875386199794026776519052523171987641606591143151390319258496395468589083419155509783728115345005149330587023686920700308959835221421215242018537590113285272914521112255406797116374871266735324407826982492276004119464469618949536560247167868177136972193614830072090628218331616889804325437693099897013388259526261585993820803295571575695159629248197734294541709577754891864057672502574665293511843460350154479917610710607621009268795056642636457260556127703398558187435633367662203913491246138002059732234809474768280123583934088568486096807415036045314109165808444902162718846549948506694129763130792996910401647785787847579814624098867147270854788877445932028836251287332646755921730175077239958805355303810504634397528321318228630278063851699279093717816683831101956745623069
  * Unit Fraction denominator: 953 repeating decimal length: 952 repeating decimal as string: 0010493179433368310598111227701993704092339979013641133263378803777544596012591815320041972717733473242392444910807974816369359916054564533053515215110178384050367261280167890870933892969569779643231899265477439664218258132214060860440713536201469045120671563483735571878279118572927597061909758656873032528856243441762854144805876180482686253934942287513116474291710388247639034627492130115424973767051416579223504721930745015739769150052465897166841552990556138509968520461699895068205666316894018887722980062959076600209863588667366211962224554039874081846799580272822665267576075550891920251836306400839454354669464847848898216159496327387198321091290661070304302203567681007345225603357817418677859391395592864637985309548793284365162644281217208814270724029380902413431269674711437565582371458551941238195173137460650577124868835257082896117523609653725078698845750262329485834207764952780692549842602308499475341028331584470094438614900314795383
  * Unit Fraction denominator: 941 repeating decimal length: 940 repeating decimal as string: 0010626992561105207226354941551540913921360255047821466524973432518597236981934112646121147715196599362380446333687566418703506907545164718384697130712008501594048884165781083953241232731137088204038257173219978746014877789585547290116896918172157279489904357066950053134962805526036131774707757704569606801275239107332624867162592986184909670563230605738575982996811902231668437832093517534537725823591923485653560042507970244420828905419766206163655685441020191285866099893730074388947927736450584484590860786397449521785334750265674814027630180658873538788522848034006376195536663124335812964930924548352816153028692879914984059511158342189160467587672688629117959617428267800212539851222104144527098831030818278427205100956429330499468650371944739638682252922422954303931987247608926673751328374070138150903294367693942614240170031880977683315621679064824654622741764080765143464399574920297555791710945802337938363443145589798087141339
  * Unit Fraction denominator: 937 repeating decimal length: 936 repeating decimal as string: 001067235859124866595517609391675560298826040554962646744930629669156883671291355389541088580576307363927427961579509071504802561366061899679829242262540021344717182497331910352187833511205976520811099252934898612593383137673425827107790821771611526147278548559231590181430096051227321237993596584845250800426894343649946638207043756670224119530416221985058697972251867662753468516542155816435432230522945570971184631803628601921024546424759871931696905016008537886872998932764140875133404482390608324439701173959445037353255069370330843116328708644610458911419423692636072572038420490928495197438633938100320170757737459978655282817502668089647812166488794023479188900747065101387406616862326574172892209178228388473852721451440768409818569903948772678762006403415154749199573105656350053361792956243329775880469583778014941302027748132337246531483457844183564567769477054429028815368196371398078975453575240128068303094983991462113127
  * Unit Fraction denominator: 887 repeating decimal length: 886 repeating decimal as string: 0011273957158962795941375422773393461104847801578354002254791431792559188275084554678692220969560315670800450958286358511837655016910935738444193912063134160090191657271702367531003382187147688838782412626832018038331454340473506200676437429537767756482525366403607666290868094701240135287485907553551296505073280721533258173618940248027057497181510710259301014656144306651634723788049605411499436302142051860202931228861330326944757609921082299887260428410372040586245772266065388951521984216459977452085682074408117249154453213077790304396843291995490417136414881623449830890642615558060879368658399098083427282976324689966178128523111612175873731679819616685456595264937993235625704622322435174746335963923337091319052987598647125140924464487034949267192784667418263810597519729425028184892897406989853438556933483652762119503945885005636978579481397970687711386696730552423900789177
  * Unit Fraction denominator: 863 repeating decimal length: 862 repeating decimal as string: 0011587485515643105446118192352259559675550405561993047508690614136732329084588644264194669756662804171494785631517960602549246813441483198146002317497103128621089223638470451911935110081112398609501738122827346465816917728852838933951332560834298957126303592120509849362688296639629200463499420625724217844727694090382387022016222479721900347624565469293163383545770567786790266512166859791425260718424101969872537659327925840092699884125144843568945538818076477404403244495944380069524913093858632676709154113557358053302433371958285052143684820393974507531865585168018539976825028968713789107763615295480880648899188876013904982618771726535341830822711471610660486674391657010428736964078794901506373117033603707995365005793742757821552723059096176129779837775202780996523754345307068366164542294322132097334878331402085747392815758980301274623406720741599073
  * Unit Fraction denominator: 857 repeating decimal length: 856 repeating decimal as string: 0011668611435239206534422403733955659276546091015169194865810968494749124854142357059509918319719953325554259043173862310385064177362893815635939323220536756126021003500583430571761960326721120186697782963827304550758459743290548424737456242707117852975495915985997666277712952158693115519253208868144690781796966161026837806301050175029171528588098016336056009334889148191365227537922987164527421236872812135355892648774795799299883313885647607934655775962660443407234539089848308051341890315052508751458576429404900816802800466744457409568261376896149358226371061843640606767794632438739789964994165694282380396732788798133022170361726954492415402567094515752625437572928821470245040840140023337222870478413068844807467911318553092182030338389731621936989498249708284714119019836639439906651108518086347724620770128354725787631271878646441073512252042007
  * Unit Fraction denominator: 823 repeating decimal length: 822 repeating decimal as string: 001215066828675577156743620899149453219927095990279465370595382746051032806804374240583232077764277035236938031591737545565006075334143377885783718104495747266099635479951397326852976913730255164034021871202916160388821385176184690157958687727825030376670716889428918590522478736330498177399756986634264884568651275820170109356014580801944106925880923450789793438639125151883353584447144592952612393681652490886998784933171324422843256379100850546780072904009720534629404617253948967193195625759416767922235722964763061968408262454434993924665856622114216281895504252733900364520048602673147023086269744835965978128797083839611178614823815309842041312272174969623329283110571081409477521263669501822600243013365735115431348724179829890643985419198055893074119076549210206561360874848116646415552855407047387606318347509113
  * Unit Fraction denominator: 821 repeating decimal length: 820 repeating decimal as string: 0012180267965895249695493300852618757612667478684531059683313032886723507917174177831912302070645554202192448233861144945188794153471376370280146163215590742996345919610231425091352009744214372716199756394640682095006090133982947624847746650426309378806333739342265529841656516443361753958587088915956151035322777101096224116930572472594397076735688185140073081607795371498172959805115712545676004872107186358099878197320341047503045066991473812423873325213154689403166869671132764920828258221680876979293544457978075517661388550548112058465286236297198538367844092570036540803897685749086479902557856272838002436053593179049939098660170523751522533495736906211936662606577344701583434835566382460414129110840438489646772228989037758830694275274056029232643118148599269183922046285018270401948842874543239951278928136419
  *
  */
