package com.wordtrellis.projecteuler

/**
  * Problem 29
  *
  * Consider all integer combinations of a^(b) for 2 <= a <= 5 and 2 <= b <= 5:
  *
  *  2^(2)=4, 2^(3)=8, 2^(4)=16, 2^(5)=32
  *  3^(2)=9, 3^(3)=27, 3^(4)=81, 3^(5)=243
  *  4^(2)=16, 4^(3)=64, 4^(4)=256, 4^(5)=1024
  *  5^(2)=25, 5^(3)=125, 5^(4)=625, 5^(5)=3125
  *
  *  If they are then placed in numerical order, with any repeats removed,
  *  we get the following sequence of 15 distinct terms:
  *
  *  4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
  *
  *  How many distinct terms are in the sequence generated by a^(b) for
  *  2 <= a <= 100 and 2 <= b <= 100?
  *
  * @author : Todd Cook
  *
  */
import scala.collection.mutable.ListBuffer

object problem_29 {

  def main(args: Array[String]): Unit = {
    //   println( computeTerms(2, 5, 2, 5)  ) // for the unit test
    println(answer)
  }

  def answer: Int = computeTerms(2, 100, 2, 100).length

  def computeTerms(termOneFloor: Int,
                   termOneCeiling: Int,
                   termTwoFloor: Int,
                   termTwoCeiling: Int): List[Double] = {
    val term1Range = (termOneFloor to termOneCeiling).toList
    val term2Range = (termTwoFloor to termTwoCeiling).toList
    val terms      = new ListBuffer[Double]()
    term1Range.foreach(a => term2Range.foreach(b => terms.append(java.lang.Math.pow(a, b))))
    val uniqueTerms = terms.toList.sortWith(_ < _).distinct
    uniqueTerms
  }
}

/**
  * Commentary:
  * can't use Long data type:
  * scala> java.lang.Math.pow(100, 100)
res138: Double = 1.0E200

scala> res138.toLong
res139: Long = 9223372036854775807

  *
  */
